---
format: html
embed-resources: true
toc: true
toc-depth: 3
execute: 
  eval: true
  echo: false
  error: false
  warning: false
---

```{r}
#| label: load project
proj_dir <- here::here()
```

```{r}
#| label: run scripts

# prepare data
source(fs::path(proj_dir, "R", "01_prepare_data.R"))

# run ad hoc analyses
source(fs::path(proj_dir, "rf_analyze_pilot_paradata.R"))
```

```{r}
rf_theme <- reactable::reactableTheme(
  headerStyle = list(
    background = "#0b2d68",
    color = "white"
  ),
  stripedColor = "#e3f7ff",
)
```

## Questionanire duration

The pilot interview is composed of three standardized questionnaires:

- Household
- Agriculture
- Supplemental

For the supplemental questionnaire, the pilot sample randomly allocated households to be administered one of three groups of supplemental modules.

Group 1 consists of:

- [SP2] EDUCATION DIGITIAL SKILLS
- [SP4] MENTAL HEALTH
- [SP6] CASUAL LABOUR
- [S12] REMITTANCES
- [S13] CHRONIC DISEASES

Group 2 consists of:

- [SP3] CHILDCARE
- [SP10] MIGRATION - FORMER HOUSEHOLD MEMBERS
- [SP11] MIGRATION ASPIRATIONS

Group 2 consists of:

- [SP1] EARLY CHILDHOOD DEVELOPMENT
- [SP5] JOB HISTORY
- [SP9] MIGRATION IN THE LAST 12 MONTHS

For the overall total duration, this is simply the sum of all duration for all modules administered. By construction, the modules differ for the supplementary ones.

```{r}
#| label: questionnaire duration
reactable::reactable(
  data = duration_by_qnr_w_total,
  defaultColDef = reactable::colDef(
    maxWidth = 100,
    format = reactable::colFormat(
      digits = 2
    )
  ),
  columns = list(
    qnr = reactable::colDef(
      header = "Questionnaire",
      width = 250
    ),
    n_obs = reactable::colDef(
      format = reactable::colFormat(separators = TRUE)
    )
  ),
  fullWidth = FALSE,
  searchable = TRUE,
  striped = TRUE,
  theme = rf_theme
)
```

## Module duration

### Overall

To give a broad sense of how long each module takes, duration is first summed at the interview level, and then statistics are computed across all interview-modules. For modules that contain rosters, the duration here should be understood as the total administration duration--for example, how long it takes, first, to enumerate all food items consumed in the past 7 days and, then, to ask detailed questions about the food items consumed.

The column `n_obs` is the number of interviews for which the module was administered, even if for only one question.

#### Summarized

For ease of reading, sections that are split into multile parts (e.g, A, B, etc.) are reported as a single section. For the agricultural questionnaire, crops, livestock, and fisheries/aquaculture modules, respectively, have been collapsed.

```{r}
#| label: section duration, summarized

reactable::reactable(
  data = duration_by_module,
  defaultColDef = reactable::colDef(
    maxWidth = 100,
    format = reactable::colFormat(
      digits = 2
    )
  ),
  columns = list(
    section = reactable::colDef(
      width = 250
    ),
    n_obs = reactable::colDef(
      format = reactable::colFormat(separators = TRUE)
    )
  ),
  fullWidth = FALSE,
  searchable = TRUE,
  striped = TRUE,
  theme = rf_theme
)

```

#### Detailed

For more detailed module-level reporting, the same information as the table above is reported by the sections as they appear in the Survey Solutions questionnaire.

```{r}
#| label: section duration, detailed

reactable::reactable(
  data = duration_by_module_detailed,
  defaultColDef = reactable::colDef(
    maxWidth = 100,
    format = reactable::colFormat(
      digits = 2
    )
  ),
  columns = list(
    section = reactable::colDef(
      width = 250
    ),
    n_obs = reactable::colDef(
      format = reactable::colFormat(separators = TRUE)
    )
  ),
  fullWidth = FALSE,
  searchable = TRUE,
  striped = TRUE,
  theme = rf_theme
)

```

### Per person

Since several modules are administered at member level, this table attempts reports a "unit" duration estimate--that is, how long the module takes to complete for one person. To do so for a given module, one first computes the total duration per row and then calculates statistics across all such rows.

The column `n_obs` is the total number of people across all interviews.

```{r}
#| label: section duration by person

reactable::reactable(
  data = duration_by_person_module,
  defaultColDef = reactable::colDef(
    maxWidth = 100,
    format = reactable::colFormat(
      digits = 2
    )
  ),
  columns = list(
    section = reactable::colDef(
      width = 250
    ),
    n_obs = reactable::colDef(
      format = reactable::colFormat(separators = TRUE)
    )
  ),
  fullWidth = FALSE,
  striped = TRUE,
  theme = rf_theme
)
```

### Per item

Since several modules are administered at the item level--whether that item be an asset, a food item, or a household enterprise--this table reports the duration per item. This "unit" duration includes any household-level questions that may come at the beginning of the module (e.g., which food items are consumed).

```{r}
#| label: section duration by item

reactable::reactable(
  data = duration_by_item,
  defaultColDef = reactable::colDef(
    maxWidth = 100,
    format = reactable::colFormat(
      digits = 2
    )
  ),
  columns = list(
    section = reactable::colDef(
      width = 250
    ),
    n_obs = reactable::colDef(
      format = reactable::colFormat(separators = TRUE)
    )
  ),
  fullWidth = FALSE,
  striped = TRUE,
  theme = rf_theme
)

```

## Question duration

Since not every question is answered in every interview, this table computes statistics for every question-level event across all pilot interviews.

Hence, `n_obs` is the number of total question events in the paradata.

```{r}
#| label: question duration

duration_by_question_filterable <- crosstalk::SharedData$new(duration_by_question)

crosstalk::bscols(
  widths = c(3, 9),
  list(
    crosstalk::filter_slider("n_obs", "Obs per question", duration_by_question_filterable, ~ n_obs, step = 1),
    crosstalk::filter_select("section", "Section", duration_by_question_filterable, ~ section, multiple = TRUE)
  ),
  reactable::reactable(
    data = duration_by_question_filterable,
    defaultColDef = reactable::colDef(
      maxWidth = 100,
      format = reactable::colFormat(
        digits = 2
      )
    ),
    columns = list(
      section = reactable::colDef(
        show = FALSE
      ),
      n_obs = reactable::colDef(
        format = reactable::colFormat(separators = TRUE)
      )
    ),
    fullWidth = FALSE,
    striped = TRUE,
    theme = rf_theme
  )
)

```

### Focus on longer modules

This section focuses on three modules that appear among the longest duration and/or were flagged by the firm as being long or frustrating for respondents.

To understand which parts of each module contribute to its overall length, each module is broken down into logical sub-sections for sub-section-level reporting of interview duration.

#### Education

Education is broken down into two sub-sections:

1. **Non-expenditure.** These questions ask about reading/writing ability and educational attainment.
2. **Expenditure.** These are non-negotiable questions about educational expenditures.

```{r}
#| label: education
 
reactable::reactable(
  data = duration_for_educ,
  defaultColDef = reactable::colDef(
    maxWidth = 100,
    format = reactable::colFormat(
      digits = 2
    )
  ),
  columns = list(
    section = reactable::colDef(
      width = 250
    ),
    n_obs = reactable::colDef(
      format = reactable::colFormat(separators = TRUE)
    )
  ),
  fullWidth = FALSE,
  striped = TRUE,
  theme = rf_theme
)

```

#### Labor

The labor module is broken down into three sub-modules:

1. **Questions 1 through 29.** This covers employment, farm work, temporary absence, and job search.
2. **Main job.** This captures information on the main job, the ISIC and ISCO codes, and assorted details on the employer and work benefits.
3. **Everything else.** This covers the second job (if any), additional work, usage of gig apps, and food or cash for work. 

```{r}
#| label: labor

reactable::reactable(
  data = duration_for_labor,
  defaultColDef = reactable::colDef(
    maxWidth = 100,
    format = reactable::colFormat(
      digits = 2
    )
  ),
  columns = list(
    section = reactable::colDef(
      width = 250
    ),
    n_obs = reactable::colDef(
      format = reactable::colFormat(separators = TRUE)
    )
  ),
  fullWidth = FALSE,
  striped = TRUE,
  theme = rf_theme
)


```

#### Shocks

The shocks module is broken down into:

- **Questions 1 and 2.** The questions that tradtionally constitute a shocks module.
- **Everything else.** The more detailed questions about shocks included in this survey, some of which are potentially duplicative of questions asked in other modules (e.g., livestock, agriculture, etc).

```{r}
#| label: shocks

reactable::reactable(
  data = duration_for_shocks,
  defaultColDef = reactable::colDef(
    maxWidth = 100,
    format = reactable::colFormat(
      digits = 2
    )
  ),
  columns = list(
    section = reactable::colDef(
      width = 250
    ),
    n_obs = reactable::colDef(
      format = reactable::colFormat(separators = TRUE)
    )
  ),
  fullWidth = FALSE,
  striped = TRUE,
  theme = rf_theme
)

```

## Pauses

Because pauses are relatively infrequent events, the table below computes the number of answer changes as a simple tally over all pilot observations.

```{r}
#| label: pauses

reactable::reactable(
  data = pauses_by_section_count,
  defaultColDef = reactable::colDef(
    maxWidth = 100,
    format = reactable::colFormat(
      digits = 2
    )
  ),
  columns = list(
    section = reactable::colDef(
      width = 250
    ),
    n_obs = reactable::colDef(
      header = "N. events",
      format = reactable::colFormat(separators = TRUE)
    ),
    n_pauses = reactable::colDef(
      header = "N. pauses",
      format = reactable::colFormat(separators = TRUE)
    ),
    pct_pauses = reactable::colDef(
      header = "% events pauses",
      format = reactable::colFormat(percent = TRUE, digits = 2)
    )
  ),
  fullWidth = FALSE,
  striped = TRUE,
  theme = rf_theme
)

```

## Answer changes

### By section

```{r}
#| label: answer changes by section

reactable::reactable(
  data = answer_changes_by_section,
  defaultColDef = reactable::colDef(
    maxWidth = 100,
    format = reactable::colFormat(
      digits = 2
    )
  ),
  columns = list(
    section = reactable::colDef(
      width = 250
    ),
    n_obs = reactable::colDef(
      format = reactable::colFormat(separators = TRUE)
    )
  ),
  fullWidth = FALSE,
  striped = TRUE,
  theme = rf_theme
)

```

### By question

Because answer changes are a relatively rare event, this table tries to identify questions with a relatively large number of answer changes by computing a simply tally of answer changes across all pilot observations.

```{r}
#| label: answer changes by question

reactable::reactable(
  data = answer_changes_by_question,
  defaultColDef = reactable::colDef(
    format = reactable::colFormat(
      digits = 2
    )
  ),
  columns = list(
    variable = reactable::colDef(
      width = 100
    ),
    n_obs = reactable::colDef(
      header = "N. events",
      format = reactable::colFormat(separators = TRUE)
    ),
    n_answer_changes = reactable::colDef(
      header = "N. answer changes",
      format = reactable::colFormat(separators = TRUE)
    ),
    pct_answer_changed = reactable::colDef(
      header = "% events are answer changes",
      format = reactable::colFormat(percent = TRUE, digits = 2)
    )
  ),
  fullWidth = FALSE,
  striped = TRUE,
  theme = rf_theme
)

```
